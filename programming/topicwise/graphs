
# References :
1) Introduction to Algorithms by Cormen = Cormen
2) The Algorithm Design Manual by Steven Skiena = Skiena
3) Abdul Bari Youtube videos = ABYT
4) ** Categorised all algorithms :: https://algorithms.discrete.ma.tum.de/



# Graph Basic

  - Skiena : 5.1
  - Cormen : 22.1

# Graph Traversal

  - BFS
    - O(E+V)
    - Cormen : 22.2
    - [WP] https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/
    - Applications
      - Connected components = Skiena : 5.7.1
      - Graph coloring = Skiena 5.7.2 = ABYT : https://www.youtube.com/watch?v=052VkKhIaQ4
      - m-Coloring/Chromatic-number decision problem = ABYT : https://www.youtube.com/watch?v=052VkKhIaQ4
      - m-Coloring/Chromatic-number optimisaition problem = ABYT : https://www.youtube.com/watch?v=052VkKhIaQ4
  - DFS
    - O(E+V)
    - Cormen : 22.3


# Detect cycle in a graph
[WC] https://www.youtube.com/watch?v=rKQaZuoUR4M


# Minimum Spanning Tree

  - Kriskal's algorithm
    - O(E log V) using binary heaps
  - Prim's algorithm
    - O(E log V) using binary heaps
    - O(E + V log V) using Fibonacci heaps

  - Tutorial :  ABYT** : https://www.youtube.com/watch?v=4ZlRH0eK-qQ


# Single Source Shortest path

  - Dijkstra : ABYT = https://www.youtube.com/watch?v=XB4MIexjvY0

# Hamiltonian cycle
[ND] https://www.youtube.com/watch?v=dQr4wZCiJJ4

# Topological Sort
** [WC] https://www.youtube.com/watch?v=ddTC4Zovtbc&ab_channel=TusharRoy-CodingMadeSimple

# Cycle Detect in Graph

Use the following approach: consider we have three colors, and each vertex should be painted with one of these colors.
  - "White color" means that the vertex hasn't been visited yet.
  - "Gray" means that we've visited the vertex but haven't visited all vertices in its subtree.
  - "Black" means we've visited all vertices in subtree and left the vertex.
So, initially all vertices are white. When we visit the vertex, we should paint it gray.
When we leave the vertex (that is we are at the end of the dfs() function, after going through all edges from the vertex), we should paint it black.

If you use that approach, you just need to change dfs() a little bit.
Assume we are going to walk through the edge v->u.
  - If u is white, go there.
  - If u is black, don't do anything.
  -If u is gray, you've found the cycle because you haven't left u yet (it's gray, not black), but you come there one more time after walking through some path.



# Other Problems

** https://leetcode.com/problems/course-schedule-ii/


## Eulerian Path problem
*** https://leetcode.com/problems/reconstruct-itinerary/
  - https://www.youtube.com/watch?v=xR4sGgwtR2I
  - https://www.youtube.com/watch?v=8MpoO2zA2l4
  - https://leetcode.com/problems/reconstruct-itinerary/discuss/78768/Short-Ruby-Python-Java-C%2B%2B


** [ND][WC] https://leetcode.com/problems/open-the-lock/

=============================================================================
** https://leetcode.com/problems/max-area-of-island/solution/
https://www.geeksforgeeks.org/find-number-of-islands/
Simply mark each visited coordinate/position of grid with 0 so that you don't explore
 its adjacent coordinates again and don't consider it as land. No need for another
  data struct to keep track of visited coordinates. Here's my answer in Python 3.

def maxAreaOfIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        # t: O(rc) s: O(1)
        max_area = 0
        for r in range(len(grid)):
            for c in range(len(grid[r])):
                if grid[r][c] == 1:
                    max_area = max(max_area, self.explore(grid, r, c))
        return max_area

    def explore(self, grid, r, c):
        if (r < 0 or r >= len(grid)) or (c < 0 or c >= len(grid[r])):
            return 0
        if grid[r][c] == 0:
            return 0
        # mark as visited
        grid[r][c] = 0
        return 1 + self.explore(grid, r - 1, c) + self.explore(grid, r, c - 1) \
            + self.explore(grid, r + 1, c) + self.explore(grid, r, c + 1)


=============================================================================



https://leetcode.com/problems/course-schedule/

https://leetcode.com/problems/course-schedule-ii/

https://leetcode.com/problems/number-of-provinces/solution/
